import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

const srcDir = path.join(__dirname, '../src')
const publicDir = path.join(__dirname, '../public')

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ—à—É–∫—É —Ñ–∞–π–ª—ñ–≤
function findFiles(dir, extensions = ['.ts', '.tsx', '.js', '.jsx', '.json']) {
  const files = []

  function scan(currentDir) {
    const items = fs.readdirSync(currentDir)

    for (const item of items) {
      const fullPath = path.join(currentDir, item)
      const stat = fs.statSync(fullPath)

      if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules') {
        scan(fullPath)
      } else if (stat.isFile() && extensions.some((ext) => item.endsWith(ext))) {
        files.push(fullPath)
      }
    }
  }

  scan(dir)
  return files
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ –º–µ–¥—ñ–∞
function updateMediaReferences(filePath) {
  try {
    let content = fs.readFileSync(filePath, 'utf8')
    let updated = false

    // –ü–∞—Ç–µ—Ä–Ω–∏ –¥–ª—è –ø–æ—à—É–∫—É –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ S3 –º–µ–¥—ñ–∞
    const patterns = [
      // S3 URL –ø–∞—Ç–µ—Ä–Ω–∏
      {
        regex: /https:\/\/[^\/]+\.s3\.[^\/]+\.amazonaws\.com\/media\/([^"'\s]+)/g,
        replacement: '/media/$1',
      },
      // Payload media –ø–æ—Å–∏–ª–∞–Ω–Ω—è
      {
        regex: /(media\.url|media\.filename|media\.sizes\.[^.]+\.url)/g,
        replacement: (match) => {
          // –ó–∞–º—ñ–Ω—é—î–º–æ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ñ —à–ª—è—Ö–∏
          return match.replace(/\.url/g, '.localPath')
        },
      },
      // –ü—Ä—è–º—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ S3
      {
        regex: /s3:\/\/[^\/]+\/media\/([^"'\s]+)/g,
        replacement: '/media/$1',
      },
    ]

    // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –∫–æ–∂–µ–Ω –ø–∞—Ç–µ—Ä–Ω
    for (const pattern of patterns) {
      const newContent = content.replace(pattern.regex, pattern.replacement)
      if (newContent !== content) {
        content = newContent
        updated = true
      }
    }

    // –Ø–∫—â–æ —Ñ–∞–π–ª –±—É–≤ –æ–Ω–æ–≤–ª–µ–Ω–∏–π, –∑–∞–ø–∏—Å—É—î–º–æ –π–æ–≥–æ
    if (updated) {
      fs.writeFileSync(filePath, content, 'utf8')
      return true
    }

    return false
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É ${filePath}:`, error.message)
    return false
  }
}

async function updateAllMediaReferences() {
  try {
    console.log('üîÑ –û–Ω–æ–≤–ª—é—é –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –º–µ–¥—ñ–∞ –≤ –∫–æ–¥—ñ...')

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ —Ñ–∞–π–ª–∏ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    const files = findFiles(srcDir)
    console.log(`üìÅ –ó–Ω–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏`)

    let updatedFiles = 0

    // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–∂–µ–Ω —Ñ–∞–π–ª
    for (const file of files) {
      const relativePath = path.relative(process.cwd(), file)

      if (updateMediaReferences(file)) {
        console.log(`‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ: ${relativePath}`)
        updatedFiles++
      }
    }

    console.log('\nüéâ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`)
    console.log(`   - –û–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: ${updatedFiles}`)
    console.log(`   - –ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: ${files.length}`)

    if (updatedFiles > 0) {
      console.log('\n‚ö†Ô∏è  –í–∞–∂–ª–∏–≤–æ:')
      console.log('1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–∞—Ü—é—é—Ç—å –≤—Å—ñ –º–µ–¥—ñ–∞ —Ñ–∞–π–ª–∏')
      console.log('2. –ü—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —Å–∞–π—Ç—É')
      console.log('3. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤—Å—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å—Å—è')
    } else {
      console.log('\n‚ÑπÔ∏è  –ó–º—ñ–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - –º–æ–∂–ª–∏–≤–æ, –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤–∂–µ –ª–æ–∫–∞–ª—å–Ω—ñ')
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω—å:', error)
  }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∫—Ä–∏–ø—Ç
updateAllMediaReferences()
