import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

const payloadConfigPath = path.join(__dirname, '../src/payload.config.ts')
const backupPath = path.join(__dirname, '../src/payload.config.ts.backup')

async function updatePayloadConfig() {
  try {
    console.log('üîÑ –û–Ω–æ–≤–ª—é—é –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é Payload...')

    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é
    if (fs.existsSync(payloadConfigPath)) {
      fs.copyFileSync(payloadConfigPath, backupPath)
      console.log('‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é payload.config.ts')
    }

    // –ß–∏—Ç–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    let configContent = fs.readFileSync(payloadConfigPath, 'utf8')

    // –í–∏–¥–∞–ª—è—î–º–æ —ñ–º–ø–æ—Ä—Ç S3 storage
    const s3StorageImport = "import { s3Storage } from '@payloadcms/storage-s3'"

    if (configContent.includes(s3StorageImport)) {
      configContent = configContent.replace(s3StorageImport, '')
      console.log('‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ —ñ–º–ø–æ—Ä—Ç S3 storage')
    }

    // –ó–∞–º—ñ–Ω—é—î–º–æ S3 –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É
    const s3Config = `    s3Storage({
      bucket: process.env.S3_BUCKET_NAME!,
      config: {
        credentials: {
          accessKeyId: process.env.S3_ACCESS_KEY_ID!,
          secretAccessKey: process.env.S3_SECRET_ACCESS_KEY!,
        },
        region: process.env.AWS_REGION!,
        forcePathStyle: true,
        endpoint: \`https://\${process.env.S3_BUCKET_NAME}.s3.\${process.env.AWS_REGION}.amazonaws.com\`,
      },
      collections: {
        media: {
          prefix: 'media',
        },
      },
      disableLocalStorage: true,
    })`

    const localConfig = `    // –í–∏–¥–∞–ª–µ–Ω–æ S3 storage - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤–±—É–¥–æ–≤–∞–Ω–µ –ª–æ–∫–∞–ª—å–Ω–µ —Å—Ö–æ–≤–∏—â–µ`

    if (configContent.includes(s3Config)) {
      configContent = configContent.replace(s3Config, localConfig)
      console.log('‚úÖ –ó–∞–º—ñ–Ω–µ–Ω–æ S3 –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –Ω–∞ localStorage')
    }

    // –ó–∞–ø–∏—Å—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    fs.writeFileSync(payloadConfigPath, configContent, 'utf8')
    console.log('‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Payload –æ–Ω–æ–≤–ª–µ–Ω–∞')

    console.log('\nüìù –©–æ –±—É–ª–æ –∑–º—ñ–Ω–µ–Ω–æ:')
    console.log('- –ó–∞–º—ñ–Ω–µ–Ω–æ S3 storage –Ω–∞ localStorage')
    console.log('- –í–∏–¥–∞–ª–µ–Ω–æ S3 –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è')
    console.log('- –°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é payload.config.ts.backup')

    console.log('\n‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ:')
    console.log('1. –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ @payloadcms/storage-local: pnpm add @payloadcms/storage-local')
    console.log('2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–µ—Ä–≤–µ—Ä –ø—ñ—Å–ª—è –∑–º—ñ–Ω')
    console.log('3. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –≤—Å—ñ –º–µ–¥—ñ–∞ —Ñ–∞–π–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –ª–æ–∫–∞–ª—å–Ω–æ')
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó:', error)
  }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∫—Ä–∏–ø—Ç
updatePayloadConfig()
