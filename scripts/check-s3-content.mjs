import { S3Client, ListObjectsV2Command } from '@aws-sdk/client-s3'
import dotenv from 'dotenv'

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
dotenv.config()

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è S3 –∫–ª—ñ—î–Ω—Ç–∞
const s3Client = new S3Client({
  region: process.env.AWS_REGION,
  credentials: {
    accessKeyId: process.env.S3_ACCESS_KEY_ID,
    secretAccessKey: process.env.S3_SECRET_ACCESS_KEY,
  },
  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π AWS S3 endpoint
  // forcePathStyle: true, // –í–∏–¥–∞–ª—è—î–º–æ —Ü–µ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ AWS S3
})

const bucketName = process.env.S3_BUCKET_NAME

async function checkS3Content() {
  try {
    console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—é –≤–º—ñ—Å—Ç S3 bucket...\n')

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    if (
      !bucketName ||
      !process.env.AWS_REGION ||
      !process.env.S3_ACCESS_KEY_ID ||
      !process.env.S3_SECRET_ACCESS_KEY
    ) {
      console.error('‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –¥–ª—è S3')
      return
    }

    console.log(`üì¶ Bucket: ${bucketName}`)
    console.log(`üåç –†–µ–≥—ñ–æ–Ω: ${process.env.AWS_REGION}`)
    console.log('='.repeat(50))

    // –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –æ–±'—î–∫—Ç—ñ–≤ —É S3
    const listCommand = new ListObjectsV2Command({
      Bucket: bucketName,
      MaxKeys: 1000, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–±'—î–∫—Ç—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É
    })

    const listResponse = await s3Client.send(listCommand)

    if (!listResponse.Contents || listResponse.Contents.length === 0) {
      console.log('‚ÑπÔ∏è  S3 bucket –ø–æ—Ä–æ–∂–Ω—ñ–π')
      return
    }

    console.log(`üìÅ –ó–Ω–∞–π–¥–µ–Ω–æ ${listResponse.Contents.length} –æ–±'—î–∫—Ç—ñ–≤ —É S3\n`)

    // –ì—Ä—É–ø—É—î–º–æ –æ–±'—î–∫—Ç–∏ –∑–∞ –ø—Ä–µ—Ñ—ñ–∫—Å–∞–º–∏
    const prefixes = {}

    for (const object of listResponse.Contents) {
      const key = object.Key
      const prefix = key.split('/')[0] || 'root'

      if (!prefixes[prefix]) {
        prefixes[prefix] = []
      }
      prefixes[prefix].push({
        key: key,
        size: object.Size,
        lastModified: object.LastModified,
      })
    }

    // –í–∏–≤–æ–¥–∏–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    for (const [prefix, objects] of Object.entries(prefixes)) {
      console.log(`üìÅ ${prefix}/ (${objects.length} —Ñ–∞–π–ª—ñ–≤)`)

      // –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 5 —Ñ–∞–π–ª—ñ–≤
      objects.slice(0, 5).forEach((obj) => {
        const size = obj.size ? `${(obj.size / 1024).toFixed(1)} KB` : '0 KB'
        const date = obj.lastModified ? obj.lastModified.toLocaleDateString() : 'N/A'
        console.log(`   üìÑ ${obj.key} (${size}, ${date})`)
      })

      if (objects.length > 5) {
        console.log(`   ... —Ç–∞ —â–µ ${objects.length - 5} —Ñ–∞–π–ª—ñ–≤`)
      }
      console.log()
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –º–µ–¥—ñ–∞ —Ñ–∞–π–ª–∏
    const mediaFiles = listResponse.Contents.filter(
      (obj) =>
        obj.Key && (obj.Key.startsWith('integritystorage/media/') || obj.Key.includes('media')),
    )

    if (mediaFiles.length > 0) {
      console.log(`üéØ –ó–Ω–∞–π–¥–µ–Ω–æ ${mediaFiles.length} –º–µ–¥—ñ–∞ —Ñ–∞–π–ª—ñ–≤`)
      console.log('‚úÖ –ú–æ–∂–Ω–∞ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –º—ñ–≥—Ä–∞—Ü—ñ—é')
    } else {
      console.log('‚ÑπÔ∏è  –ú–µ–¥—ñ–∞ —Ñ–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')
      console.log('üí° –ú–æ–∂–ª–∏–≤–æ, –≤–æ–Ω–∏ –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –≤ —ñ–Ω—à—ñ–π –ø–∞–ø—Ü—ñ –∞–±–æ —É –≤–∞—Å –Ω–µ–º–∞—î –º–µ–¥—ñ–∞ —Ñ–∞–π–ª—ñ–≤ —É S3')
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ S3:', error.message)

    if (error.Code === 'NoSuchBucket') {
      console.log('üí° Bucket –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ —É –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É')
    } else if (error.Code === 'AccessDenied') {
      console.log('üí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ bucket')
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∫—Ä–∏–ø—Ç
checkS3Content()
